# YouTube Clone - Service Account and RBAC Configuration
# Professional security setup with minimal required permissions

---
# Service Account
apiVersion: v1
kind: ServiceAccount
metadata:
  name: youtube-clone-sa
  labels:
    app: youtube-clone
    version: v1
    component: frontend
  annotations:
    # AWS IAM Role Association (if using IRSA)
    eks.amazonaws.com/role-arn: arn:aws:iam::ACCOUNT-ID:role/youtube-clone-role
    # GCP Workload Identity (if using GKE)
    iam.gke.io/gcp-service-account: youtube-clone@PROJECT-ID.iam.gserviceaccount.com
automountServiceAccountToken: false

---
# Role for application-specific permissions
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: youtube-clone-role
  labels:
    app: youtube-clone
    version: v1
rules:
# ConfigMap access
- apiGroups: [""]
  resources: ["configmaps"]
  verbs: ["get", "list", "watch"]
  resourceNames: ["youtube-clone-config"]
# Secret access
- apiGroups: [""]
  resources: ["secrets"]
  verbs: ["get", "list", "watch"]
  resourceNames: ["youtube-clone-secrets"]
# Pod information (for health checks)
- apiGroups: [""]
  resources: ["pods"]
  verbs: ["get", "list"]
# Service discovery
- apiGroups: [""]
  resources: ["services", "endpoints"]
  verbs: ["get", "list", "watch"]

---
# RoleBinding
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: youtube-clone-rolebinding
  labels:
    app: youtube-clone
    version: v1
subjects:
- kind: ServiceAccount
  name: youtube-clone-sa
  namespace: youtube-clone-v1
roleRef:
  kind: Role
  name: youtube-clone-role
  apiGroup: rbac.authorization.k8s.io

---
# GitHub Container Registry Secret
apiVersion: v1
kind: Secret
metadata:
  name: github-container-registry
  labels:
    app: youtube-clone
    version: v1
  annotations:
    kubernetes.io/service-account.name: youtube-clone-sa
type: kubernetes.io/dockerconfigjson
data:
  # Base64 encoded Docker config JSON
  # Generate with: kubectl create secret docker-registry github-container-registry \
  #   --docker-server=ghcr.io \
  #   --docker-username=sudo-hrmn \
  #   --docker-password=<GITHUB_TOKEN> \
  #   --docker-email=<EMAIL> \
  #   --dry-run=client -o yaml
  .dockerconfigjson: eyJhdXRocyI6eyJnaGNyLmlvIjp7InVzZXJuYW1lIjoic3Vkby1ocm1uIiwicGFzc3dvcmQiOiJHSVRIVUJfVE9LRU4iLCJlbWFpbCI6InN1ZG8taHJtbkBleGFtcGxlLmNvbSIsImF1dGgiOiJjM1ZrYnkxb2NtMXVPa2RKVkVoVlFsOVVUMHRGVGc9PSJ9fX0=
